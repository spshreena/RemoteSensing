//Import study area 
var AOI = ee.FeatureCollection('users/shreenapyakurel/AOI_dissolve');
AOI = AOI.geometry();
Map.centerObject(AOI);
Map.addLayer(AOI, {color: 'yellow'}, 'AOI');

//-----------------------------------------------------------------------------------------------------------------
//Import landsat 5 image tile
var dataset = ee.ImageCollection('LANDSAT/LT05/C01/T1_TOA')

//sort by time and location to get the best tile
var spatialFiltered = dataset.filterBounds(AOI);
print('spatialFiltered', spatialFiltered);

var temporalFiltered = spatialFiltered.filterDate('2002-04-01', '2002-5-31');
print('temporalFiltered', temporalFiltered);

// This will sort from least to most cloudy.
var sorted = temporalFiltered.sort('CLOUD_COVER');
print("sorted", sorted)

// Get the first (least cloudy) image.
var scene = sorted.first();

//----------------------------------------------------------------------------------------------------------------
// visualizing images in composites 
Map.centerObject(AOI);
var TCC = {bands: ['B3', 'B2', 'B1'], max: 0.3};
Map.addLayer(scene, TCC, 'true-color composite');

var TFCC = {bands: ['B4', 'B3', 'B2'], max: 0.3};
Map.addLayer(scene, TFCC, 'false-color composite');
//----------------------------------------------------------------------------------------------------------------
// Creating  buffers 1000m, 1500m, 2000m, 2500m, 3000m 

var AOI = ee.FeatureCollection(AOI);

var buff1000 = AOI.map(function(f) {
  return f.buffer(1000, 100); // Note that the errorMargin is set to 100.
});
Map.addLayer(buff1000, {color: 'green'}, '1000buff');

var buff1500 = AOI.map(function(f) {
  return f.buffer(1500, 100); // Note that the errorMargin is set to 100.
});

Map.addLayer(buff1500, {color: 'blue'}, '1500buff');


var buff2000 = AOI.map(function(f) {
  return f.buffer(2000, 100); // Note that the errorMargin is set to 100.
});

Map.addLayer(buff2000, {color: 'orange'}, '2000buff');

var buff2500 = AOI.map(function(f) {
  return f.buffer(2500, 100); // Note that the errorMargin is set to 100.
});

Map.addLayer(buff2000, {color: 'teal'}, '2500buff');

var buff3000 = AOI.map(function(f) {
  return f.buffer(3000, 100); // Note that the errorMargin is set to 100.
});

Map.addLayer(buff3000, {color: 'pink'}, '3000buff');
//----------------------------------------------------------------------------------------------------------------------------------
//Indices 
//NDVI
var nir = scene.select('B4');
var red = scene.select('B3');
var blue= scene.select('B1')

var ndvi = nir.subtract(red).divide(nir.add(red)).rename('NDVI');
print(ndvi)

Map.centerObject(AOI, 9);
var ndviParams = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
Map.addLayer(ndvi, ndviParams, 'NDVI image');

//EVI
//evi index
// Compute the EVI using an expression.
var evi = scene.expression(
    '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
      'NIR': scene.select('B4'),
      'RED': scene.select('B3'),
      'BLUE': scene.select('B1')
});

var eviParams = {
  min: 0.0,
  max: 1.0,
  palette: [
    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
    '012E01', '011D01', '011301'
  ]};

print(evi)
Map.centerObject(AOI, 9);
Map.addLayer(evi, eviParams, 'EVI image');

//NDWI
var ndwi = nir.subtract(swir).divide(nir.add(swir)).rename('NDWI');
print(ndwi)
var ndwiParams = {
  min: 0.0,
  max: 1.0,
  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff'],
};
Map.centerObject(AOI, 9);
Map.addLayer(ndwi, ndwiParams, 'NDWI image');




